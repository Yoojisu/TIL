# 제네릭
 - 제네릭 타입에서는 int, float, double 같은 데이타 요소 타입을 확정하지 않고 이 데이타 타입 자체를 타입파라미터(Type Parameter)로 
   받아들이도록 클래스를 정의한다. 이렇게 정의된 클래스 즉 C# 제네릭 타입을 사용할 때는 클래스명과 함께 구체적인 데이타 타입을 함께 
   지정해 주게 된다. 이렇게 하면 일부 상이한 데이타 타입 때문에 여러 개의 클래스들을 따로 만들 필요가 없어지게 된다. 
   C# 제네릭은 이렇게 클래스 이외에도 인터페이스나 메서드에도 적용될 수 있다.
   
 - 요약하면, C# 제네릭은 C++의 템플릿과 비슷한 (주: 내부 아키텍쳐는 상당한 차이점이 있다) 개념으로서 클래스, 인터페이스, 메서드 등에 <T> 
   같은 타입 파라미터를 붙여 구현한다. 사용시에는 이 타입 파라미터에 특정 타입을 지정하게 되는데, 실행(Runtime)시에 제네릭 타입(Generic Type)으로부터 
   지정된 타입의 객체(object)를 구체적으로 생성해서 사용하게 된다. 타입 파라미터는 하나 이상 여러 개를 지정할 수도 있다.
 
 
// 어떤 요소 타입도 받아들 일 수 있는
// 스택 클래스를 C# 제네릭을 이용하여 정의
class MyStack<T>
{
    T[] _elements;
    int pos = 0;

    public MyStack()
    {
        _elements = new T[100];
    }

    public void Push(T element)
    {
        _elements[++pos] = element;
    }

    public T Pop()
    {
        return _elements[pos--];
    }
}

// 두 개의 서로 다른 타입을 갖는 스택 객체를 생성
MyStack<int> numberStack = new MyStack<int>();
MyStack<string> nameStack = new MyStack<string>();


# .NET Generic 클래스들
 - https://docs.microsoft.com/ko-kr/dotnet/api/system.collections.generic?redirectedfrom=MSDN&view=dotnet-plat-ext-3.1(System.Collections.Generic 네임스페이스)
   흔히 사용하는 List<T>, Dictionary<T>, LinkedList<T> 등의 클래스들은 이 네임스페이스 안에 들어 있다.
   
   
