# 접근 제한자
 - 접근 제한자는 외부로부터 타입(클래스, 구조체, 인터페이스, 델리게이트 등) 혹은 그 타입 멤버들(메서드, 속성, 이벤트, 
   필드 등)로의 접근을 제한할 때 사용하는 것으로 다음과 같은 종류가 있다.
   
   1.public: 모든 외부(파생클래스 포함)에서 이 타입(Type: 클래스, 구조체, 인터페이스, 델리게이트 등)을 엑세스할 수 있다. 
            (개별 타입 멤버의 엑세스 권한은 해당 멤버의 접근 제한자에 따라 별도로 제한될 수 있다)
            
   2.internal: 동일한 Assembly 내에 있는 다른 타입들이 엑세스 할 수 있다. 하지만, 다른 어셈블리에서는 접근이 불가하다.         
   
   3.protected: 파생클래스에서 이 클래스 멤버를 엑세스할 수 있다.
   
   4.private: 동일 클래스/구조체 내의 멤버만 접근 가능
   
   - 보통 클래스와 구조체는 네임스페이스 바로 밑에 선언하는데,이때 디폴트로 internal 접근 제한을 갖는다. 
    단, 클래스 내부에 Nested 클래스를 선언하는 것과 같이 Nested Type을 선언하면 디폴트로 private 접근 제한을 갖는다.
    
   - 인터페이스(interface)와 열거형(enum)의 멤버는 기본적으로 public 이며, 각 멤버에 별도의 접근 제한자를 사용하지 않는다.  
   
  ex) 
   //MyClass는 internal 클래스로서 동일 어셈블리 내의 다른 타입만 이 클래스로 접근할 수 있다.
   internal class MyClass
    {
      // _id 는 private 필드로서 클래스 내부에서만 사용 가능하다 .
       private int _id = 0; 
        
       // Name은 public 프로퍼티로서 클래스를 엑세스할 수 있는 모든 외부 객체에서 접근 가능하다.
       public string Name { get; set; }
      
      // Run()은 public 메서드로서 클래스를 엑세스할 수 있는 모든 객체에서 접근 가능하다.
       public void Run(int id) {}
      
      // Execute()는 protected 메서드로서 해당 MyClass와 이의 파생 클래스에서만 접근 가능하다.
       protected void Execute() { }
    }




