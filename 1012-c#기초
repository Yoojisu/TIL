# 네임스페이스
 
 - 첫째는 클래스명 앞에 네임스페이스 전부를 적는 경우와 둘째는 프로그램 맨 윗단에 해당 using을 사용하여 
   C# (.cs) 파일에서 사용하고자 하는 네임스페이스를 한번 설정해 주고, 이후 해당 파일 내에서 네임스페이스 없이 직접 클래스를 사용하는 경우이다. 
   실무에서는 주로 두번째 방식을 사용한다
   
//첫번째 방식
static void Main(string[] args)
{
    System.Console.WriteLine();
}

//두번째 방식
using System; //System 네임스페이스 지정

static void Main(string[] args)
{
    Console.WriteLine();
}

# Value Type vs Reference Type

 - Value Type : int, double, float, bool 등의 기본 데이터 타입은 모두 struct로 정의된 Value Type임.
                상속될 수 없으며, 주로 상대적으로 간단한 데이터 값을 저장하는데 사용. 데이터를 복사하여 전달

 - Refernce Type : class를 정의하여 만들며 상속 가능, 좀 더 복잡한 데이터와 행위를 정의하는 곳에 많이 사용됨
                   Reference Type은 Heap 상의 객체에 대한 레퍼런스(reference)를 전달하여 이루어진다
                   
                   
// System.Int32 (Value Type)
public struct Int32 
{ 
   //....
}

// System.String (Reference Type)
public sealed class String 
{
   //....
}

# class
 - 클래스는 메서드 (Method), 속성 (Property), 필드 (Field), 이벤트 (Event) 등을 멤버로 포함하는 소프트웨어 단위로서 보통 
   이 클래스 정의로부터 객체 (Object)를 생성해서 사용하게 된다.
                 
# Nullable 

 - C#에서 정수, 부동자릿수, 구조체 등의 Value Type은 NULL을 가질 수 없다. 예를 들어, 정수 int i 가 있을 때 변수 i에는 null을 할당할 수 없으며,
   따라서 변수 i는 어떤 값이 할당되지 않은 상태 (missing value)를 가질 수 없다.
    
   C# 에서는 Value Type에도 null을 할당할 수 있는 Nullable 타입을 지원한다. Nullable 타입은 Value 값을 갖고 있으면서 NULL 상태를 체크할 수 있는 
   기능(HasValue)을 함께 가지고 있는 struct 이다. 따라서 Nullable 타입은 struct(구조체)이므로 Value Type이다.
   
   int? 와 같이 해당 Value Type 뒤에 물음표를 붙이면, 해당 정수형 타입이 Nullable 정수형 타입임을 의미한다.  이 변수에는 NULL을 할당할 수 있다.
   
    int? i = null;
    bool? b = null;
    int?[] a = new int?[100];
    
    Nullable 타입과 연관되어 자주 사용되는 C#의 ?? 연산자는 ?? 앞의 파라미터가 NULL인 경우 연산자 뒤의 값을 할당할 때 사용한다
    
    
double _Sum = 0;
DateTime _Time;
bool? _Selected;

public void CheckInput(int? i, double? d, DateTime? time, bool? selected)
{
if (i.HasValue && d.HasValue)
    this._Sum = (double)i.Value + (double)d.Value;

// time값이 있는 체크.
if (!time.HasValue)
    throw new ArgumentException();
else
    this._Time = time.Value;

// 만약 selected가 NULL이면 false를 할당
this._Selected = selected ?? false;
}
    
    
    -(int) Nullable.Compare -> 0 :true / -1 :false
    -(bool) Nullable.Equals -> true/flase
    
   
