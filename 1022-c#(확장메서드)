# 확장 메서드
 - C# 3.0부터 지원하는 확장메서드(Extension Method)는 특수한 종류의 static 메서드인데, 확장메서드는 마치 다른 클래스(혹은 구조체)의 인스턴스 메서드인 것처럼
   사용되는 기능을 제공한다. 확장메서드는 클래스, 구조체, 인터페이스 등에 적용될 수 있다.
   
   일반적으로 인스턴스 메서드를 추가하기 위해서는 해당 클래스(혹은 타입)안에 메서드를 추가한다. 하지만, 경우는 메서드를 클래스(혹은 타입)에 직접 추가하는 것이
   어려울 수도 있는데, 이러한 경우 확장메서드가 유용하게 사용될 수 잇다. 
   확장메서드를 사용하면 클래스를 직접 변경하지 않고도, 클래스 외부에서 (확장)메서드를 정의함으로 해서 마치 그 클래스의 기능을 확장한 인스턴스 메서드를 추가한 것 같은
   효과를 낼 수 있다.
   
   
   확장메서드는 static class 안에 static method로 정의된다. 확장메서드는 첫번째 파라미터로 항상 클래스명(혹은 타입)을 지정하는데, 이는 그 확장메서드가 
   사용될 클래스 타입을 지정하는 것이다. 이를 통해 확장메서드는 마치 그 클래스의 인스턴스 메서드인 것처럼 사용할 수 있게 된다. 
   약간 특이한 문법이지만, 확장 메서드의 첫번째 파라미터의 클래스명 바로 앞에는 항상 this를 써준다.

   아래 예제는 .NET의 String 클래스를 첫번째 파라미터로 갖는 확장메서드로서, String 클래스에서만 동작하는 확장메서드를 정의한 예이다. 
   ToChangeCase(this String str) 메서드는 파라미터가 하나로서 String 클래스에서 사용되는 확장메서드이며 그 메서드는 다른 입력파라미터를 갖지 않지만, 
   Found(this String str, char ch) 메서드는 String 클래스에서 사용되는 확장메서드로서 char 문자 하나를 입력파라미터로 받아들이는 메서드이다.
   

namespace MySystem
{
   // static class를 정의
   public static class ExClass
   {
      // static 확장메서드를 정의. 첫번째 파라미터는
      // 어떤 클래스가 사용할 지만 지정. 
      public static string ToChangeCase(this String str)
      {
         StringBuilder sb = new StringBuilder();
         foreach (var ch in str)
         {
            if (ch >= 'A' && ch <= 'Z')
               sb.Append((char)('a' + ch - 'A'));
            else if (ch >= 'a' && ch <= 'z')
               sb.Append((char)('A' + ch - 'a'));
            else
               sb.Append(ch);
         }
         return sb.ToString();
      }

      // 이 확장메서드는 파라미터 ch가 필요함
      public static bool Found(this String str, char ch)
      {
         int position = str.IndexOf(ch);
         return position >= 0;
      }
   }

   class Program
   {
      static void Main(string[] args)
      {
         string s = "This is a Test";
         
         // s객체 즉 String객체가
         // 확장메서드의 첫 파리미터임
         // 실제 ToChangeCase() 메서드는
         // 파라미터를 갖지 않는다.
         string s2 = s.ToChangeCase();

         // String 객체가 사용하는 확장메서드이며
         // z 값을 파라미터로 사용
         bool found = s.Found('z');
      }
   }
}

# 확장메서드 예제
 - System.Linq.Enumerable  클래스는 LINQ 쿼리에서 사용되는 많은 확장 메서드를 포함하는 클래스이다.
   예를 들어 Enumerable 클래스는 다음과 같은 Where() 확장메서드를 포함하고 있다. 첫번째 파라미터는 이 메서드가 IEnumerable<T> 인터페이스를 
   지원하는 모든 Type에 사용된다는 것을 의미한다. 두번째 파라미터는 Func 라는 Delegate를 받아들인다는 것을 의미하는데, 
   보통 여기에는 LINQ 쿼리를 람다식 (Lambda Expression)으로 표현하여 넣게 된다.
 
// LINQ에 정의된 Where 확장메서드
public static IEnumerable<TSource> Where<TSource>(
    this IEnumerable<TSource> source, 
    Func<TSource, bool> predicate
)


 
 - 아래는 Where() 확장메서드를 사용하는 예제이다. Where() 확장메서드의 첫번째 파라미터에 해당되는 this Enumerable<T>은 IEnumerable<T>를 갖는 
   클래스에서 사용된다는 의미인데, 변수 list 객체가 IEnumerable을 구현한 문자열 리스트이므로 list.Where()처럼 사용할 수 있다. 
   아래 예에서 Where() 안의 파라미터는 람다식 표현으로 Element중 A로 시작되는 문자열들만 선별하는 것을 의미한다.
   
// Where 확장메서드를 List<T>에서 사용

List<string> list = new List<string> { "Apple", "Grape", "Banana" };
IEnumerable<string> q = list.Where(p => p.StartsWith("A"));
 
 - 또 다른 예로서 아래 예제는 Where() 확장 메서드를 정수 리스트에 적용하여 3으로 나누어 떨어지는 데이타만 출력해 본 것이다.
   Where()의 리턴 값은 IEnumerable<int>인데, 이를 동적배열(List)로 변경하기 위해 ToList() 메서드를 사용하였다.
 
static void Main(string[] args)
{
   List<int> nums = new List<int> { 55, 44, 33, 66, 11 };

   // Where 확장 메서드 정수 리스트에 사용
   var v = nums.Where(p => p % 3 == 0);

   // IEnumerable<int> 결과를 정수리스트로 변환
   List<int> arr = v.ToList<int>();

   // 리스트 출력
   arr.ForEach(n => Console.WriteLine(n));
}
   
 
