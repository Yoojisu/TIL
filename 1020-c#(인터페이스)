# 인터페이스
 - 클래스와 비슷하게 인터페이스는 메서드, 속성, 이벤트, 인덱서 등을 갖지만, 인터페이스는 이를 직접 구현하지 않고 단지 정의만을 갖는다.
   즉, 인터페이스는 추상멤버로만 구성된 추상 Base클래스(abstract base class)와 개념적으로 유사하다.
   클래스가 인터페이스를 가지는 경우 해당 인터페이스의 모든 멤버에 대한 구현을 제공해야 한다.
   한 클래스는 하나의 Base 클래스만을 가질 수 있지만, 인터페이스는 여러 개를 가질 수 있음.  
  
public class MyConnection : Component, IDbConnection, IDisposable
{
   // IDbConnection을 구현
   // IDisposable을 구현
   // -> IDbConnection, IDisposable 2개의 인터페이스를 가지고 잇다.
}

# 인터페이스의 정의
 - 인터페이스는 c# 키워드 interface를 사용하여 정의함
   인터페이스 정의 시에는 내부 멤버들에 대해 public과 같은 접근 제한자를 사용하지 않는다.

public interface IComparable
{
   // 멤버 앞에 접근제한자 사용 안함, CompareTo() 메서드 앞에 public 을 쓸 수 없다.
   int CompareTo(object obj);
 }

# 인터페이스의 구현
 - c#클래스가 인터페이스를 갖는 경우 인터페이스의 모든 멤버에 대한 구현을 제공해야 한다.
   c#에서는 인터페이스로부터 직접 new를 사용하여 객체를 생성할 수 없다. 아래의 클래스는 IComparable이라는 인터페이스를 같는 경우로서
   IComparable.CompareTo() 메서드를 구현한 예임
   
public class MyClass : IComparable
{
   private int key;
   private int value;

   // IComparable 의 CompareTo 메서드 구현
   public int CompareTo(object obj)
   {
      MyClass target = (MyClass)obj;
      return this.key.CompareTo(target.key);
   }
}

- IComparable 
namespace System
{
    public interface IComparable
    {
        int CompareTo(object? obj);
    }
}

# 인터페이스의 사용
 -c# 실무에서 클래스와 인터페이스를 잘 정의하고 사용하는 것은 매우 중요하다. 비지니스를 객체지향 프로그래밍으로 디자인하고 구현하는데 가장 중요한
  핵심이기 때문이다. 자연스럽게 .Net Framework도 상당히 많은 인터페이스를 구현했으며, 거의 모든 영역에서 흔히 사용되고 있다.
  
 public void Run()
{
   // 인터페이스 사용하기 때문에
   // 특정 DB Connection을 신경 쓸 필요가 없다
   IDbConnection dbCon = GetDbConnection();
   dbCon.Open();
   if (dbCon.State == ConnectionState.Open)
   {
      dbCon.Close();
   }
}

// IDbConnection 인터페이스를 리턴
public IDbConnection GetDbConnection()
{
   IDbConnection dbConn = null;
   string cn = ConfigurationManager.AppSettings["Connection"];
   switch (ConfigurationManager.AppSettings["DbType"])
   {
      case "SQLServer":
         dbConn = new SqlConnection(cn);
         break;
      case "Oracle":
         dbConn = new OracleConnection(cn);
         break;
      case "OleDB":
         dbConn = new OleDbConnection(cn);
         break;         
   }
   return dbConn;
}
  
