# 메서드
 - 클래스내에서 일련의 코드 블럭을 실행시키는 함수를 메서드라 부른다. 메서드는 0 ~ N개의 인수를 갖을 수 있으며, 하나의 리턴 값을 갖는다. 리턴 값이 없으면 리턴 타입을 void로 표시한다. 
   또한 public, private 같은 접근 제한자를 리턴 타입 앞에 둘 수 있다.
  

# Pass by Value
 -  메서드에 인수를 전달할 때, 디폴트로 값을 복사해서 전달하는 Pass by Value 방식을 따른다. 
    만약 전달된 인수를 메서드 내에서 변경한다해도 메서드가 끝나고 함수가 리턴된 후, 
    전달되었던 인수의 값은 호출자에서 원래 값 그대로 유지된다.
    
     private void Calculate(int a)
    {
        a *= 2;
        // a = 200;
    }

    static void Main(string[] args)
    {
        Program p = new Program();

        int val = 100;
        p.Calculate(val);  
        // val는 그대로 100        
    }
    
#  Named 파라미터
 - 메서드에 파라미터를 전달할 때, 일반적으로 파라미터 위치에 따라 순차적으로 파라미터가 넘겨지는데, 
   C# 4.0부터는 위치와 상관없이 파라미터명을 지정하여 파라미터를 전달할 수 있게 하였다. 이러한 파라미터를 Named Parameter라 부른다.
   
   Method1(name: "John", age: 10, score: 90);
   
# Optional 파라미터
 - C# 4.0에서부터 어떤 메서드의 파라미터가 디폴트 값을 갖고 있다면, 메서드 호출시 이러한 파라미터를 생략하는 것을 허용하였다. 
   이렇게 디폴트 값을 가진 파라미터를 Optional 파라미터라 부른다. Optional 파라미터는 반드시 파라미터들 중 맨 마지막에 놓여져야 한다. 
   복수개의 Optional 파라미터가 있는 경우 반드시 Optional 이 아닌 파라미터들 뒤에 위치해야 한다.
   
  
    // Optional 파라미터: calcType가 디폴트 값이기 때문에 맨 마지막에 위치
    int Calc(int a, int b, string calcType = "+")
    {
        switch (calcType)
        {
            case "+":
                return a + b;
            case "-":
                return a - b;
            case "*":
                return a * b;
            case "/":
                return a / b;
            default:
                throw new ArithmeticException();
        }
    }

    static void Main(string[] args)
    {
        Program p = new Program();
        int ret = p.Calc(1, 2);
        ret = p.Calc(1, 2, "*");
    }
    
 # params
  - 일반적으로 메서드의 파라미터 갯수는 고정되어 있다. 하지만 어떤 경우는 파라미터의 갯수를 미리 알 수 없는 경우도 있는데, 이런 경우 C# 키워드 params를 사용한다. 
    이 params 키워드는 가변적인 배열을 인수로 갖게 해주는데, 파라미터들 중 반드시 하나만 존재해야 하며, 맨 마지막에 위치해야 한다.
  
  //메서드
  int Calc(params int[] values)

  //사용
  int s = Calc(1,2,3,4);
  s = Calc(6,7,8,9,10,11);
